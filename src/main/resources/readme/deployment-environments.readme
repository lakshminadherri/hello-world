First this to note is the Business Group Id which you can retreive from Access Manager.

This is top Level Element of pom.xml.

for example : erri is the business orgranisation --> Access Manager

<groupId>571fdbb5-1048-4a71-8935-0a3494006a49</groupId>
under distrubution management URL should be pointing to above group id as shown below.


<distributionManagement>
		<repository>
			<!-- Note the ID Here -->
			<id>anypoint-exchange-v3</id>
			<name>Corporate Repository</name>
			<url>https://maven.anypoint.mulesoft.com/api/v3/organizations/${project.groupId}/maven</url>
			<layout>default</layout>
		</repository>
</distributionManagement><url>https://maven.anypoint.mulesoft.com/api/v3/organizations/${project.groupId}/maven</url>

we have 4 Environments for this Group
	Sandbix
	Design
	DEV
	TEST

Create a Connected APP make sure you have provide required previleges 
  -- General
  -- API Manager
  -- Runtime etc..,
  
please note while providing runtime manager properties you select all the environment under this group.
    
use the connected app client Id and ClientSecret to access mulr platform. this can be configured in settings.xml
		<server>
		   <!-- Note the ID Here -->
			<id>anypoint-exchange-v3</id>
			 <username>~~~Client~~~</username>
			 <!-- <password>${clientID}~?~${clientSecret}</password>  -->
			<password>7959ab7539604433b1fce24ef0cc2868~?~17b99076a8dB49C8A3bf64420D011140</password>
		</server>
  
Please note this will be referenced in pom.xml in 3 places.

		<configuration>
					<cloudhub2Deployment>
						<uri>https://anypoint.mulesoft.com</uri>
						<provider>MC</provider>
						<target>Cloudhub-US-East-2</target>
						<muleVersion>4.8.0</muleVersion>
						<!-- Note the ID Here -->
						<server>anypoint-exchange-v3</server>
						<replicas>1</replicas>
						<vCores>0.1</vCores>
					</cloudhub2Deployment>
				</configuration>

  <repository>
			<!-- Note the ID Here -->
			<id>anypoint-exchange-v3</id>
			<name>Anypoint Exchange</name>
			<url>https://maven.anypoint.mulesoft.com/api/v3/maven</url>
			<layout>default</layout>
		</repository>
  
  <distributionManagement>
		<repository>
			<!-- Note the ID Here -->
			<id>anypoint-exchange-v3</id>
			<name>Corporate Repository</name>
			<url>https://maven.anypoint.mulesoft.com/api/v3/organizations/${project.groupId}/maven</url>
			<layout>default</layout>
		</repository>
	</distributionManagement>
	
	
Create profiles for each environment. for example

dev and test

<profiles>
		<profile>
			<id>dev</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.mule.tools.maven</groupId>
						<artifactId>mule-maven-plugin</artifactId>
						<version>${mule.maven.plugin.version}</version>
						<extensions>true</extensions>
						<configuration>
							<cloudhub2Deployment>
								<applicationName>nadh-dev-helloworld-demo</applicationName>
								<environment>DEV</environment>
								<properties>
									<env>dev</env>
									<api.id>20206394</api.id>
								</properties>
							</cloudhub2Deployment>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>test</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.mule.tools.maven</groupId>
						<artifactId>mule-maven-plugin</artifactId>
						<version>${mule.maven.plugin.version}</version>
						<extensions>true</extensions>
						<configuration>
							<cloudhub2Deployment>
								<environment>TEST</environment>
								<applicationName>nadh-test-helloworld-demo</applicationName>
								<replicas>1</replicas>
								<vCores>0.2</vCores>
								<properties>
									<env>test</env>
									<api.id>20206401</api.id>
								</properties>
							</cloudhub2Deployment>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>


some time we get a build issue when that artifact was not binded or something like that..
Application needs to be deployed to Exchange first u can do this 

mvn clean package deploy --> this will deploy to exchange
mvn clean package deploy -DmuleDeploy -- this will deploy to runtime manager.

mvn clean deploy -Pdev -DmuleDeploy -s settings.xml -- deployment to dev
mvn clean deploy -Ptest -DmuleDeploy -s settings.xml



injecting properties using settings.xml file.

<profiles>
		<profile>
			<id>dev</id>
			<properties>
				<environment>DEV</environment>
			</properties>
		</profile>
		<profile>
			<id>test</id>
			<properties>
				<environment>TEST</environment>
			</properties>
		</profile>
		
		
		


https://help.salesforce.com/s/articleView?id=001114486&type=1

GOAL
Deploy Mule applications to CloudHub using Maven and the Mule Maven plugin

Within the attached project, you will find a pom.xml that uses Maven profiles to separate the configuration for different environments. 

You will find that we have set some properties for each profile. These properties will be set in your CloudHub application's properties. 

To run the examples, you can change the <environment>Sandbox</environment> to the profile you need:

<properties>
     <mule.env>dev</mule.env>
     <myProperty1>value1</myProperty1>
     <myProperty2>value2</myProperty2>
</properties>
To deploy to a development environment: 

mvn package deploy -Duid=user -Dpwd=password -Pdev
To deploy to a Production environment: 
mvn package deploy -Duid=user -Dpwd=password -Pprod
How to deploy using variables (i.e. pass an older snapshot version):

To set variables through Maven using the command line, use ${myVar} in your pom.xml. 

<properties>
     <mule.env>dev</mule.env>
     <myProperty1>${myVar}</myProperty1>
     <myProperty2>value2</myProperty2>
</properties>
Then, in the command line you can execute:

mvn package deploy -Duid=user -Dpwd=pass -DmyVar=thisvalue -Pdev
 

